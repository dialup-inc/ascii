package render

import (
	"image/color"
	"io"
	"strconv"
)

type ANSI struct {
	Display io.Writer
}

func (a *ANSI) Clear() (int, error) {
	return a.Display.Write([]byte{'\033', '[', '2', 'J'})
}

func (a *ANSI) CursorPosition(row, column int) (int, error) {
	cmd := []byte{'\033', '['}
	if row > 1 || column > 1 {
		cmd = strconv.AppendInt(cmd, int64(row), 10)
	}
	if column > 1 {
		cmd = append(cmd, ';')
		cmd = strconv.AppendInt(cmd, int64(column), 10)
	}
	cmd = append(cmd, 'H')

	return a.Display.Write(cmd)
}

func (a *ANSI) Foreground(c color.Color) (int, error) {
	index := ANSIPalette.Index(c)

	var cmd []byte
	cmd = append(cmd, '\033', '[', '3', '8', ';', '5', ';')
	cmd = strconv.AppendInt(cmd, int64(index), 10)
	cmd = append(cmd, 'm')

	return a.Display.Write(cmd)
}

func (a *ANSI) ForegroundReset() (int, error) {
	return a.Display.Write([]byte{'\033', '[', '3', '9', 'm'})
}

func (a *ANSI) Background(c color.Color) (int, error) {
	index := ANSIPalette.Index(c)

	var cmd []byte
	cmd = append(cmd, '\033', '[', '4', '8', ';', '5', ';')
	cmd = strconv.AppendInt(cmd, int64(index), 10)
	cmd = append(cmd, 'm')

	return a.Display.Write(cmd)
}

func (a *ANSI) BackgroundReset() (int, error) {
	return a.Display.Write([]byte{'\033', '[', '4', '9', 'm'})
}

func (a *ANSI) Normal() (int, error) {
	return a.Display.Write([]byte{'\033', '[', '2', '2', 'm'})
}

func (a *ANSI) Bold() (int, error) {
	return a.Display.Write([]byte{'\033', '[', '1', 'm'})
}

func (a *ANSI) Blink() (int, error) {
	return a.Display.Write([]byte{'\033', '[', '5', 'm'})
}

func (a *ANSI) BlinkOff() (int, error) {
	return a.Display.Write([]byte{'\033', '[', '2', '5', 'm'})
}

func (a *ANSI) Reset() (int, error) {
	return a.Display.Write([]byte{'\033', '[', '0'})
}

var ANSIPalette = color.Palette{
	color.RGBA{0x00, 0x00, 0x00, 0xFF},
	color.RGBA{0x80, 0x00, 0x00, 0xFF},
	color.RGBA{0x00, 0x80, 0x00, 0xFF},
	color.RGBA{0x80, 0x80, 0x00, 0xFF},
	color.RGBA{0x00, 0x00, 0x80, 0xFF},
	color.RGBA{0x80, 0x00, 0x80, 0xFF},
	color.RGBA{0x00, 0x80, 0x80, 0xFF},
	color.RGBA{0xc0, 0xc0, 0xc0, 0xFF},
	color.RGBA{0x80, 0x80, 0x80, 0xFF},
	color.RGBA{0xff, 0x00, 0x00, 0xFF},
	color.RGBA{0x00, 0xff, 0x00, 0xFF},
	color.RGBA{0xff, 0xff, 0x00, 0xFF},
	color.RGBA{0x00, 0x00, 0xff, 0xFF},
	color.RGBA{0xff, 0x00, 0xff, 0xFF},
	color.RGBA{0x00, 0xff, 0xff, 0xFF},
	color.RGBA{0xff, 0xff, 0xff, 0xFF},
	color.RGBA{0x00, 0x00, 0x00, 0xFF},
	color.RGBA{0x00, 0x00, 0x5f, 0xFF},
	color.RGBA{0x00, 0x00, 0x87, 0xFF},
	color.RGBA{0x00, 0x00, 0xaf, 0xFF},
	color.RGBA{0x00, 0x00, 0xd7, 0xFF},
	color.RGBA{0x00, 0x00, 0xff, 0xFF},
	color.RGBA{0x00, 0x5f, 0x00, 0xFF},
	color.RGBA{0x00, 0x5f, 0x5f, 0xFF},
	color.RGBA{0x00, 0x5f, 0x87, 0xFF},
	color.RGBA{0x00, 0x5f, 0xaf, 0xFF},
	color.RGBA{0x00, 0x5f, 0xd7, 0xFF},
	color.RGBA{0x00, 0x5f, 0xff, 0xFF},
	color.RGBA{0x00, 0x87, 0x00, 0xFF},
	color.RGBA{0x00, 0x87, 0x5f, 0xFF},
	color.RGBA{0x00, 0x87, 0x87, 0xFF},
	color.RGBA{0x00, 0x87, 0xaf, 0xFF},
	color.RGBA{0x00, 0x87, 0xd7, 0xFF},
	color.RGBA{0x00, 0x87, 0xff, 0xFF},
	color.RGBA{0x00, 0xaf, 0x00, 0xFF},
	color.RGBA{0x00, 0xaf, 0x5f, 0xFF},
	color.RGBA{0x00, 0xaf, 0x87, 0xFF},
	color.RGBA{0x00, 0xaf, 0xaf, 0xFF},
	color.RGBA{0x00, 0xaf, 0xd7, 0xFF},
	color.RGBA{0x00, 0xaf, 0xff, 0xFF},
	color.RGBA{0x00, 0xd7, 0x00, 0xFF},
	color.RGBA{0x00, 0xd7, 0x5f, 0xFF},
	color.RGBA{0x00, 0xd7, 0x87, 0xFF},
	color.RGBA{0x00, 0xd7, 0xaf, 0xFF},
	color.RGBA{0x00, 0xd7, 0xd7, 0xFF},
	color.RGBA{0x00, 0xd7, 0xff, 0xFF},
	color.RGBA{0x00, 0xff, 0x00, 0xFF},
	color.RGBA{0x00, 0xff, 0x5f, 0xFF},
	color.RGBA{0x00, 0xff, 0x87, 0xFF},
	color.RGBA{0x00, 0xff, 0xaf, 0xFF},
	color.RGBA{0x00, 0xff, 0xd7, 0xFF},
	color.RGBA{0x00, 0xff, 0xff, 0xFF},
	color.RGBA{0x5f, 0x00, 0x00, 0xFF},
	color.RGBA{0x5f, 0x00, 0x5f, 0xFF},
	color.RGBA{0x5f, 0x00, 0x87, 0xFF},
	color.RGBA{0x5f, 0x00, 0xaf, 0xFF},
	color.RGBA{0x5f, 0x00, 0xd7, 0xFF},
	color.RGBA{0x5f, 0x00, 0xff, 0xFF},
	color.RGBA{0x5f, 0x5f, 0x00, 0xFF},
	color.RGBA{0x5f, 0x5f, 0x5f, 0xFF},
	color.RGBA{0x5f, 0x5f, 0x87, 0xFF},
	color.RGBA{0x5f, 0x5f, 0xaf, 0xFF},
	color.RGBA{0x5f, 0x5f, 0xd7, 0xFF},
	color.RGBA{0x5f, 0x5f, 0xff, 0xFF},
	color.RGBA{0x5f, 0x87, 0x00, 0xFF},
	color.RGBA{0x5f, 0x87, 0x5f, 0xFF},
	color.RGBA{0x5f, 0x87, 0x87, 0xFF},
	color.RGBA{0x5f, 0x87, 0xaf, 0xFF},
	color.RGBA{0x5f, 0x87, 0xd7, 0xFF},
	color.RGBA{0x5f, 0x87, 0xff, 0xFF},
	color.RGBA{0x5f, 0xaf, 0x00, 0xFF},
	color.RGBA{0x5f, 0xaf, 0x5f, 0xFF},
	color.RGBA{0x5f, 0xaf, 0x87, 0xFF},
	color.RGBA{0x5f, 0xaf, 0xaf, 0xFF},
	color.RGBA{0x5f, 0xaf, 0xd7, 0xFF},
	color.RGBA{0x5f, 0xaf, 0xff, 0xFF},
	color.RGBA{0x5f, 0xd7, 0x00, 0xFF},
	color.RGBA{0x5f, 0xd7, 0x5f, 0xFF},
	color.RGBA{0x5f, 0xd7, 0x87, 0xFF},
	color.RGBA{0x5f, 0xd7, 0xaf, 0xFF},
	color.RGBA{0x5f, 0xd7, 0xd7, 0xFF},
	color.RGBA{0x5f, 0xd7, 0xff, 0xFF},
	color.RGBA{0x5f, 0xff, 0x00, 0xFF},
	color.RGBA{0x5f, 0xff, 0x5f, 0xFF},
	color.RGBA{0x5f, 0xff, 0x87, 0xFF},
	color.RGBA{0x5f, 0xff, 0xaf, 0xFF},
	color.RGBA{0x5f, 0xff, 0xd7, 0xFF},
	color.RGBA{0x5f, 0xff, 0xff, 0xFF},
	color.RGBA{0x87, 0x00, 0x00, 0xFF},
	color.RGBA{0x87, 0x00, 0x5f, 0xFF},
	color.RGBA{0x87, 0x00, 0x87, 0xFF},
	color.RGBA{0x87, 0x00, 0xaf, 0xFF},
	color.RGBA{0x87, 0x00, 0xd7, 0xFF},
	color.RGBA{0x87, 0x00, 0xff, 0xFF},
	color.RGBA{0x87, 0x5f, 0x00, 0xFF},
	color.RGBA{0x87, 0x5f, 0x5f, 0xFF},
	color.RGBA{0x87, 0x5f, 0x87, 0xFF},
	color.RGBA{0x87, 0x5f, 0xaf, 0xFF},
	color.RGBA{0x87, 0x5f, 0xd7, 0xFF},
	color.RGBA{0x87, 0x5f, 0xff, 0xFF},
	color.RGBA{0x87, 0x87, 0x00, 0xFF},
	color.RGBA{0x87, 0x87, 0x5f, 0xFF},
	color.RGBA{0x87, 0x87, 0x87, 0xFF},
	color.RGBA{0x87, 0x87, 0xaf, 0xFF},
	color.RGBA{0x87, 0x87, 0xd7, 0xFF},
	color.RGBA{0x87, 0x87, 0xff, 0xFF},
	color.RGBA{0x87, 0xaf, 0x00, 0xFF},
	color.RGBA{0x87, 0xaf, 0x5f, 0xFF},
	color.RGBA{0x87, 0xaf, 0x87, 0xFF},
	color.RGBA{0x87, 0xaf, 0xaf, 0xFF},
	color.RGBA{0x87, 0xaf, 0xd7, 0xFF},
	color.RGBA{0x87, 0xaf, 0xff, 0xFF},
	color.RGBA{0x87, 0xd7, 0x00, 0xFF},
	color.RGBA{0x87, 0xd7, 0x5f, 0xFF},
	color.RGBA{0x87, 0xd7, 0x87, 0xFF},
	color.RGBA{0x87, 0xd7, 0xaf, 0xFF},
	color.RGBA{0x87, 0xd7, 0xd7, 0xFF},
	color.RGBA{0x87, 0xd7, 0xff, 0xFF},
	color.RGBA{0x87, 0xff, 0x00, 0xFF},
	color.RGBA{0x87, 0xff, 0x5f, 0xFF},
	color.RGBA{0x87, 0xff, 0x87, 0xFF},
	color.RGBA{0x87, 0xff, 0xaf, 0xFF},
	color.RGBA{0x87, 0xff, 0xd7, 0xFF},
	color.RGBA{0x87, 0xff, 0xff, 0xFF},
	color.RGBA{0xaf, 0x00, 0x00, 0xFF},
	color.RGBA{0xaf, 0x00, 0x5f, 0xFF},
	color.RGBA{0xaf, 0x00, 0x87, 0xFF},
	color.RGBA{0xaf, 0x00, 0xaf, 0xFF},
	color.RGBA{0xaf, 0x00, 0xd7, 0xFF},
	color.RGBA{0xaf, 0x00, 0xff, 0xFF},
	color.RGBA{0xaf, 0x5f, 0x00, 0xFF},
	color.RGBA{0xaf, 0x5f, 0x5f, 0xFF},
	color.RGBA{0xaf, 0x5f, 0x87, 0xFF},
	color.RGBA{0xaf, 0x5f, 0xaf, 0xFF},
	color.RGBA{0xaf, 0x5f, 0xd7, 0xFF},
	color.RGBA{0xaf, 0x5f, 0xff, 0xFF},
	color.RGBA{0xaf, 0x87, 0x00, 0xFF},
	color.RGBA{0xaf, 0x87, 0x5f, 0xFF},
	color.RGBA{0xaf, 0x87, 0x87, 0xFF},
	color.RGBA{0xaf, 0x87, 0xaf, 0xFF},
	color.RGBA{0xaf, 0x87, 0xd7, 0xFF},
	color.RGBA{0xaf, 0x87, 0xff, 0xFF},
	color.RGBA{0xaf, 0xaf, 0x00, 0xFF},
	color.RGBA{0xaf, 0xaf, 0x5f, 0xFF},
	color.RGBA{0xaf, 0xaf, 0x87, 0xFF},
	color.RGBA{0xaf, 0xaf, 0xaf, 0xFF},
	color.RGBA{0xaf, 0xaf, 0xd7, 0xFF},
	color.RGBA{0xaf, 0xaf, 0xff, 0xFF},
	color.RGBA{0xaf, 0xd7, 0x00, 0xFF},
	color.RGBA{0xaf, 0xd7, 0x5f, 0xFF},
	color.RGBA{0xaf, 0xd7, 0x87, 0xFF},
	color.RGBA{0xaf, 0xd7, 0xaf, 0xFF},
	color.RGBA{0xaf, 0xd7, 0xd7, 0xFF},
	color.RGBA{0xaf, 0xd7, 0xff, 0xFF},
	color.RGBA{0xaf, 0xff, 0x00, 0xFF},
	color.RGBA{0xaf, 0xff, 0x5f, 0xFF},
	color.RGBA{0xaf, 0xff, 0x87, 0xFF},
	color.RGBA{0xaf, 0xff, 0xaf, 0xFF},
	color.RGBA{0xaf, 0xff, 0xd7, 0xFF},
	color.RGBA{0xaf, 0xff, 0xff, 0xFF},
	color.RGBA{0xd7, 0x00, 0x00, 0xFF},
	color.RGBA{0xd7, 0x00, 0x5f, 0xFF},
	color.RGBA{0xd7, 0x00, 0x87, 0xFF},
	color.RGBA{0xd7, 0x00, 0xaf, 0xFF},
	color.RGBA{0xd7, 0x00, 0xd7, 0xFF},
	color.RGBA{0xd7, 0x00, 0xff, 0xFF},
	color.RGBA{0xd7, 0x5f, 0x00, 0xFF},
	color.RGBA{0xd7, 0x5f, 0x5f, 0xFF},
	color.RGBA{0xd7, 0x5f, 0x87, 0xFF},
	color.RGBA{0xd7, 0x5f, 0xaf, 0xFF},
	color.RGBA{0xd7, 0x5f, 0xd7, 0xFF},
	color.RGBA{0xd7, 0x5f, 0xff, 0xFF},
	color.RGBA{0xd7, 0x87, 0x00, 0xFF},
	color.RGBA{0xd7, 0x87, 0x5f, 0xFF},
	color.RGBA{0xd7, 0x87, 0x87, 0xFF},
	color.RGBA{0xd7, 0x87, 0xaf, 0xFF},
	color.RGBA{0xd7, 0x87, 0xd7, 0xFF},
	color.RGBA{0xd7, 0x87, 0xff, 0xFF},
	color.RGBA{0xd7, 0xaf, 0x00, 0xFF},
	color.RGBA{0xd7, 0xaf, 0x5f, 0xFF},
	color.RGBA{0xd7, 0xaf, 0x87, 0xFF},
	color.RGBA{0xd7, 0xaf, 0xaf, 0xFF},
	color.RGBA{0xd7, 0xaf, 0xd7, 0xFF},
	color.RGBA{0xd7, 0xaf, 0xff, 0xFF},
	color.RGBA{0xd7, 0xd7, 0x00, 0xFF},
	color.RGBA{0xd7, 0xd7, 0x5f, 0xFF},
	color.RGBA{0xd7, 0xd7, 0x87, 0xFF},
	color.RGBA{0xd7, 0xd7, 0xaf, 0xFF},
	color.RGBA{0xd7, 0xd7, 0xd7, 0xFF},
	color.RGBA{0xd7, 0xd7, 0xff, 0xFF},
	color.RGBA{0xd7, 0xff, 0x00, 0xFF},
	color.RGBA{0xd7, 0xff, 0x5f, 0xFF},
	color.RGBA{0xd7, 0xff, 0x87, 0xFF},
	color.RGBA{0xd7, 0xff, 0xaf, 0xFF},
	color.RGBA{0xd7, 0xff, 0xd7, 0xFF},
	color.RGBA{0xd7, 0xff, 0xff, 0xFF},
	color.RGBA{0xff, 0x00, 0x00, 0xFF},
	color.RGBA{0xff, 0x00, 0x5f, 0xFF},
	color.RGBA{0xff, 0x00, 0x87, 0xFF},
	color.RGBA{0xff, 0x00, 0xaf, 0xFF},
	color.RGBA{0xff, 0x00, 0xd7, 0xFF},
	color.RGBA{0xff, 0x00, 0xff, 0xFF},
	color.RGBA{0xff, 0x5f, 0x00, 0xFF},
	color.RGBA{0xff, 0x5f, 0x5f, 0xFF},
	color.RGBA{0xff, 0x5f, 0x87, 0xFF},
	color.RGBA{0xff, 0x5f, 0xaf, 0xFF},
	color.RGBA{0xff, 0x5f, 0xd7, 0xFF},
	color.RGBA{0xff, 0x5f, 0xff, 0xFF},
	color.RGBA{0xff, 0x87, 0x00, 0xFF},
	color.RGBA{0xff, 0x87, 0x5f, 0xFF},
	color.RGBA{0xff, 0x87, 0x87, 0xFF},
	color.RGBA{0xff, 0x87, 0xaf, 0xFF},
	color.RGBA{0xff, 0x87, 0xd7, 0xFF},
	color.RGBA{0xff, 0x87, 0xff, 0xFF},
	color.RGBA{0xff, 0xaf, 0x00, 0xFF},
	color.RGBA{0xff, 0xaf, 0x5f, 0xFF},
	color.RGBA{0xff, 0xaf, 0x87, 0xFF},
	color.RGBA{0xff, 0xaf, 0xaf, 0xFF},
	color.RGBA{0xff, 0xaf, 0xd7, 0xFF},
	color.RGBA{0xff, 0xaf, 0xff, 0xFF},
	color.RGBA{0xff, 0xd7, 0x00, 0xFF},
	color.RGBA{0xff, 0xd7, 0x5f, 0xFF},
	color.RGBA{0xff, 0xd7, 0x87, 0xFF},
	color.RGBA{0xff, 0xd7, 0xaf, 0xFF},
	color.RGBA{0xff, 0xd7, 0xd7, 0xFF},
	color.RGBA{0xff, 0xd7, 0xff, 0xFF},
	color.RGBA{0xff, 0xff, 0x00, 0xFF},
	color.RGBA{0xff, 0xff, 0x5f, 0xFF},
	color.RGBA{0xff, 0xff, 0x87, 0xFF},
	color.RGBA{0xff, 0xff, 0xaf, 0xFF},
	color.RGBA{0xff, 0xff, 0xd7, 0xFF},
	color.RGBA{0xff, 0xff, 0xff, 0xFF},
	color.RGBA{0x08, 0x08, 0x08, 0xFF},
	color.RGBA{0x12, 0x12, 0x12, 0xFF},
	color.RGBA{0x1c, 0x1c, 0x1c, 0xFF},
	color.RGBA{0x26, 0x26, 0x26, 0xFF},
	color.RGBA{0x30, 0x30, 0x30, 0xFF},
	color.RGBA{0x3a, 0x3a, 0x3a, 0xFF},
	color.RGBA{0x44, 0x44, 0x44, 0xFF},
	color.RGBA{0x4e, 0x4e, 0x4e, 0xFF},
	color.RGBA{0x58, 0x58, 0x58, 0xFF},
	color.RGBA{0x62, 0x62, 0x62, 0xFF},
	color.RGBA{0x6c, 0x6c, 0x6c, 0xFF},
	color.RGBA{0x76, 0x76, 0x76, 0xFF},
	color.RGBA{0x80, 0x80, 0x80, 0xFF},
	color.RGBA{0x8a, 0x8a, 0x8a, 0xFF},
	color.RGBA{0x94, 0x94, 0x94, 0xFF},
	color.RGBA{0x9e, 0x9e, 0x9e, 0xFF},
	color.RGBA{0xa8, 0xa8, 0xa8, 0xFF},
	color.RGBA{0xb2, 0xb2, 0xb2, 0xFF},
	color.RGBA{0xbc, 0xbc, 0xbc, 0xFF},
	color.RGBA{0xc6, 0xc6, 0xc6, 0xFF},
	color.RGBA{0xd0, 0xd0, 0xd0, 0xFF},
	color.RGBA{0xda, 0xda, 0xda, 0xFF},
	color.RGBA{0xe4, 0xe4, 0xe4, 0xFF},
	color.RGBA{0xee, 0xee, 0xee, 0xFF},
}
